Welcome to the Nazgul Tools project!

    Nazgul tools contains build cycle definitions, parent poms and commonly used (i.e. globally available) aspects.
    There are several kinds of project here:

    * <<Reactor poms>>. These extend the nazgul-tools root pom and create the build reactor (hence their name), by
      defining the <<<modules>>> element. Reactor poms do not define any dependencies, and are not deployed
      as artifacts - but they [may] hold site documentation and are visible within the staged site. Reactor poms'
      sites hold structural links to parent and child modules.

    * <<Parent poms>>. These poms are used as parents for deployable artifacts (i.e. JARs, WARs, EARs etc.).
      Parent poms therefore define dependencies and configure build cycle plugins. Parent poms are deployed
      as artifacts and should hold site documentation visible within the staged site.

    * <<Globally available Aspects>>. Projects holding aspects which should potentially always be woven into other
      artifacts' code. Within the nazgul-tools reactor, only the validation-aspect project contain a globally
      available aspect.

    * <<Codestyle>>. The nazgul-codestyle project contains configurations and implementations for defining and
      enforcing the nazgul component patterns. The maven build rules defined within this project are used throughout
      all projects within the reactor, and also applied to all projects using the provided parents from this project
      (i.e. nazgul-parent).

    []


* Reactor build structure

    The nazgul-tools reactor projects depend on one another as illustrated in the image below:

[images/reactor_structure.png] Reactor Structure

   [[1]] Coding definitions, configuration and enforcement rules.

   [[2]] Build cycle definitions / root parent pom. Uses rules from the codestyle project, implying that the
         nazgul-tools-parent depends on the codestyle project.

   [[3]] The Validation API project holds the API required for globally available validation, and the
         Validation Aspect project holds the aspect implementation of the Validation API.

   [[4]] External POM, including the Validation Aspect into the default build cycle.

   []