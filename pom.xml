<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) jGuru Europe AB.
  ~ All rights reserved.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--
    ################################################
    # Section 1:  Project information
    ################################################
    -->
    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>

    <groupId>se.jguru.nazgul.tools</groupId>
    <artifactId>nazgul-tools-reactor</artifactId>
    <version>2.0.7-SNAPSHOT</version>
    <name>${project.artifactId}</name>
    <url>${reactor.url.remote.prefix}/${reactor.name}/${project.version}</url>
    <description>The Nazgul Framework: Tools project holds a collection of Maven best-pracises and sensible
        configurations, aimed at boosting productivity. The Nazgul Framework: Tools project enables you to start
        projects quickly and scale them considerably without needing to change the development or deployment model.
    </description>
    <packaging>pom</packaging>
    <inceptionYear>2010</inceptionYear>

    <organization>
        <name>jGuru Europe AB</name>
        <url>http://www.jguru.se/</url>
    </organization>

    <prerequisites>
        <maven>3.0.5</maven>
    </prerequisites>

    <licenses>
        <license>
            <name>jGuru Europe Corporate Source License, based on The Apache Software License, Version 2.0</name>
            <url>http://www.jguru.se/licenses/jguruCorporateSourceLicense-2.0.txt</url>
            <distribution>repo</distribution>
            <comments>A business-friendly OSS license</comments>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>lj</id>
            <name>Lennart JÃ¶relid</name>
            <email>lj@jguru.se</email>
            <roles>
                <role>Committer</role>
            </roles>
            <organization>jGuru Europe AB</organization>
            <organizationUrl>http://www.jguru.se</organizationUrl>
            <timezone>+1</timezone>
        </developer>
    </developers>

    <properties>
        <!-- Build definition properties -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <jdk.version>1.6</jdk.version>

        <!-- Code style properties -->
        <wtp.version>2.0</wtp.version>
        <clean.plugin.version>2.5</clean.plugin.version>
        <maven-project-info-reports-plugin.version>2.7</maven-project-info-reports-plugin.version>

        <!--
            Define the URL prefixes for Site Deployment and DistributionManagement.
            These can be overridden in sub-reactors to tailor releases to other locations.
        -->
        <reactor.url.remote.prefix>http://bitbucket.org/lennartj</reactor.url.remote.prefix>
        <site.url.prefix>scp://www-data@angmar/var/www/nazgul</site.url.prefix>
        <reactor.name>nazgul_tools</reactor.name>
        <site.staging.localDirectory>/tmp/${reactor.name}</site.staging.localDirectory>
        <scm.url.prefix>scm:hg:${reactor.url.remote.prefix}</scm.url.prefix>
    </properties>

    <!--
    ################################################
    # Section 2:  Modules
    ################################################
    -->
    <modules>
        <module>codestyle</module>
        <module>validation</module>
        <module>poms</module>
    </modules>

    <!--
    ################################################
    # Section 3:  Build settings
    ################################################
    -->
    <build>
        <plugins>

            <!--
                Configures the release plugin.

                Why:  Make the release plugin replace any information received from the Sonatype OSS parent.
                Used: Release lifecycle, mvn release.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.4</version>
                <configuration combine.self="override">
                    <localCheckout>true</localCheckout>
                    <tagNameFormat>nazgul-tools-@{project.version}</tagNameFormat>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.scm</groupId>
                        <artifactId>maven-scm-provider-hg</artifactId>
                        <version>1.8.1</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!--
                To deploy a Staged site for the Nazgul Tools reactor, perform the following:

                a) Define a settings.xml server setting with the id jGuru_NazgulToolsSite:

                    <server>
                        <id>jGuru_NazgulToolsSite</id>
                        <username>yourUserName</username>
                        <privateKey>[path to your SSH private key]</privateKey>
                        <passphrase>[password for your SSH private key]</passphrase>
                        <filePermissions>664</filePermissions>
                        <directoryPermissions>755</directoryPermissions>
                    </server>

                   There are other security options than a certificate, as explained in
                   http://maven.apache.org/settings.html#Servers

                b) If you use certificate security as illustrated above, ensure that your *public* SSH key is
                   copied to the target server's SSH daemon's recognitioning file.

                   For example, on a Linux server this is typically done by appending your public SSH key to
                   the ${HOME}/.ssh/authorized_keys file of the account you want to use to deploy your staged site.

                   This process is better described on the net:

                   Linux:       http://www.csua.berkeley.edu/~ranga/notes/ssh_nopass.html
                   Mac OS X:    http://xiix.wordpress.com/2007/03/31/how-to-set-up-public-key-authentication-pka-on-your-mac/
                   Windows:     http://comptb.cects.com/1439-openssh-rsa-authentication-for-windows-and-linux

                d) Ensure that all the distributionManagement/site/url's relate to the topSiteURL value as the
                   staged project site should relate to the top of the site. Assuming that the topSiteURL is
                   ${nazgul-tools.sitedeploy.url}/version/${project.version}/ and your project Foo should reside
                   immediately below the root, the distributionManagement/site/url in that project should be defined
                   as ${nazgul-tools.sitedeploy.url}/version/${project.version}/foo.

                   Also, ensure that the distributionManagement/site/id is "jGuru_NazgulToolsSite", as illustrated
                   below:

                    <distributionManagement>
                        <site>
                            <id>jGuru_NazgulToolsSite</id>
                            <name>jGuru_NazgulToolsSite</name>
                            <url>${nazgul-tools.sitedeploy.url}/version/${project.version}/path/to/project</url>
                        </site>
                    </distributionManagement>

                e) Fire the two commands after one another:

                   mvn clean site

                   mvn -Dnazgul-tools.sitedeploy.url=scp://yourhost/path/to/deployment/root site:stage-deploy

                   where "yourhost" is the same server you uploaded the ssh certificate to in step (b).
                   The staged site should now reside in the directory
                   /path/to/deployment/root/version/${project.version}/staging
                   on the "yourhost" server.

                f) For simplicity, if you upload the site to the same host and location most of the time,
                   you are recommended to create a Maven profile within the settings.xml file defining the
                   property nazgul-tools.sitedeploy.url. Such a profile is created by adding the following
                   to the ${HOME}/.m2/settings.xml file:

                   ...
                   <profiles>
                        <profile>
                            <id>siteDeploy</id>
                            <properties>
                                <nazgul-tools.sitedeploy.url>[your url here]</nazgul-tools.sitedeploy.url>
                            </properties>
                        </profile>
                   </profiles>


                   This way you need not submit it on the command line as
                   illustrated in (e) above, but instead use the command:

                   mvn -PsiteDeploy site:stage-deploy
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.3</version>
                <executions>
                    <execution>
                        <id>attach-descriptor</id>
                        <goals>
                            <goal>attach-descriptor</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <topSiteURL>${site.url.prefix}/${reactor.name}</topSiteURL>
                    <stagingSiteURL>${site.url.prefix}/${reactor.name}</stagingSiteURL>
                    <stagingDirectory>${site.staging.localDirectory}</stagingDirectory>
                    <generateSitemap>true</generateSitemap>
                    <inputEncoding>${project.build.sourceEncoding}</inputEncoding>
                    <outputEncoding>${project.reporting.outputEncoding}</outputEncoding>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.wagon</groupId>
                        <artifactId>wagon-ssh</artifactId>
                        <version>2.4</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.maven.wagon</groupId>
                        <artifactId>wagon-file</artifactId>
                        <version>2.4</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.maven.doxia</groupId>
                        <artifactId>doxia-module-markdown</artifactId>
                        <version>1.3</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.maven.doxia</groupId>
                        <artifactId>doxia-module-xhtml</artifactId>
                        <version>1.3</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!--
                Provides Plantuml integration into site deployments.

                Why:  Convert Plantuml documents to png images.
                Used: Site lifecycle, mvn site.
            -->
            <plugin>
                <groupId>com.github.jeluard</groupId>
                <artifactId>plantuml-maven-plugin</artifactId>
                <version>7954</version>
                <configuration>
                    <sourceFiles>
                        <directory>${basedir}</directory>
                        <includes>
                            <include>src/site/**/*.puml</include>
                        </includes>
                    </sourceFiles>
                    <outputDirectory>${project.build.directory}/site/images/plantuml</outputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-plantuml-diagrams</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <phase>process-sources</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <excludeDefaults>true</excludeDefaults>
        <outputDirectory>${project.build.directory}/site</outputDirectory>
        <plugins>

            <!--
                Configures the projects-info-reports plugin.

                Why:  Reduce the time consumed considerably by removing the need to acquire
                      dependency details and locations.
                Used: Site lifecycle, mvn site.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin.version}</version>
                <configuration>
                    <dependencyDetailsEnabled>false</dependencyDetailsEnabled>
                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

    <profiles>

        <!--
            Use GPG to sign artifacts during release:perform.

            Why:  Makes the releases traceable to their originator. Required by maven central and Sonatype OSS.
            Used: Standard lifecycle, mvn release.
        -->
        <profile>
            <id>release-sign-artifacts</id>
            <activation>
                <property>
                    <name>performRelease</name>
                    <value>true</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.4</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <!--
    ################################################
    # Section 4:  External systems
    ################################################
    -->
    <!--
       Define connections for Maven's Mercurial integration.
    -->
    <scm>
        <connection>${scm.url.prefix}/${reactor.name}</connection>
        <developerConnection>${scm.url.prefix}/${reactor.name}</developerConnection>
        <url>${reactor.url.remote.prefix}/${reactor.name}</url>
        <tag>HEAD</tag>
    </scm>

    <!--
        Define the issue management system.
    -->
    <issueManagement>
        <system>bitbucket</system>
        <url>${reactor.url.remote.prefix}/${reactor.name}/issues</url>
    </issueManagement>

    <!--
        Define repository settings for Maven's deploy and release plugins.
    -->
    <distributionManagement>
        <site>
            <id>jGuru_NazgulToolsSite</id>
            <name>jGuru_NazgulToolsSite</name>
            <url>${site.url.prefix}/${reactor.name}/${project.version}</url>
        </site>
    </distributionManagement>
</project>
